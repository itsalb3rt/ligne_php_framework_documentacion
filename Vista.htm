<html>

<head>
    <meta charset="UTF-8">
    <meta http-equiv=Content-Type content="text/html; charset=windows-1252">
    <meta name=Generator content="Microsoft Word 15 (filtered)">
    <link rel="stylesheet" href="css/ligne.min.css?v1.2">
    <link rel="stylesheet" href="css/menu.css">
    <link rel="stylesheet" href="css/code_style.css">
    <script src="js/includes.js"></script>
    <script src="js/rainbow-custom.min.js"></script>
    <script src="js/php.js"></script>
    <script src="js/html.js"></script>
    <title>Vistas</title>
    <style>
        /* Font Definitions */
        * {
            font-family: Verdana, sans-serif;
        }


        /*Estilo del codigo php*/
        p.MsoNormal, li.MsoNormal, div.MsoNormal {
            margin-top: 0cm;
            margin-right: 0cm;
            margin-bottom: 8.0pt;
            margin-left: 0cm;
            line-height: 1.5rem;
            font-size: 14pt;
            font-family: "Calibri", sans-serif;
        }
        pre {
            mso-style-link: "HTML con formato previo Car";
            margin: 0cm;
            margin-bottom: .0001pt;
            font-size: 10.0pt;
            font-family: "Courier New";
        }
        ol li{
            margin: 8px;
            font-weight: bold;
        }
    </style>

</head>
<body>
<div class="container-fluid">
    <div w3-include-html="includes/tabla_contenido.html"></div>
    <!--incluyendo el menu-->
    <div w3-include-html="includes/menu.html"></div>
    <!--incluyendo el menu-->

    <div class="panel bordered">
        <div class="body">
            <h3>Contenido</h3>
            <ol>
                <li><a href="#vistas" class="important primary undecoration">Vistas</a></li>
                <li><a href="#disenos" class="important primary undecoration">Diseños</a></li>
                <li><a href="#assets" class="important primary undecoration">Assets o recursos</a></li>
                <li><a href="#interaccion_vistas_datos" class="important primary undecoration">Las vistas y la interacción con los datos</a></li>
                <li><a href="#funciones_extras" class="important primary undecoration">Funciones extras</a></li>
            </ol>
        </div>
        <div class="body">

            <div id="vistas" class="panel bordered">
                <div class="body">
                    <p class=MsoNormal><b><span style='font-size:16.0pt;line-height:107%'>Vistas</span></b></p>

                    <p class=MsoNormal>Las vistas son responsables de generar la salida específica
                        requerida para la solicitud. A menudo, esto es en forma de HTML o PHP.</p>

                    <p class=MsoNormal>La capa de visualización de Ligne es la forma en que le
                        hablas a tus usuarios. La mayoría de las veces, sus vistas mostrarán (X)
                        documentos HTML en los navegadores.</p>

                    <p class=MsoNormal>Por defecto, los archivos de vista de Ligne están escritos
                        en PHP plano. Estos archivos contienen toda la lógica de presentación necesaria
                        para obtener los datos que recibió del controlador en un formato que está listo
                        para el usuario al que se dirige.</p>

                    <p class=MsoNormal>Un archivo de vista se almacena en <span style='background:silver'>/View/</span> una subcarpeta que lleva el nombre del controlador que
                        usa el archivo. Tiene un nombre de archivo correspondiente a su acción. Por
                        ejemplo, el archivo de vista para la acción &quot;<span style='background:silver'>create
()</span>&quot; del controlador Task normalmente se encuentra en <span
                                style='background:silver'>/View/Tasks/create.php</span></p>

                    <p class=MsoNormal>La capa de vista de Ligne puede estar compuesta de varias
                        partes diferentes. Cada parte tiene diferentes usos:</p>

                    <p class=MsoNormal>&nbsp;</p>

                    <ul style='margin-top:0cm' type=disc>
                        <li class=MsoNormal><b>vistas</b>: Las vistas son la parte de la página que es
                            exclusiva de la acción que se está ejecutando.
                        </li>
                        <li class=MsoNormal><b>Layout</b>: Esto es el esqueleto de tus vistas, dentro
                            de esta carpeta está el main layout <i>(por nombrarlo de una manera)</i>,
                            este te permite mantener una única estructura en todo tu proyecto ya que
                            todas las vistas se renderizan dentro de este.
                        </li>
                    </ul>

                    <p class=MsoNormal><b><span style='font-size:16.0pt;line-height:107%'>&nbsp;</span></b></p>
                </div>
            </div>

            <div id="disenos" class="panel bordered">
                <div class="body">
                    <p class=MsoNormal><b><span style='font-size:16.0pt;line-height:107%'>Diseños</span></b></p>

                    <p class=MsoNormal>Un diseño contiene un código de presentación que se ajusta a
                        una vista. Cualquier cosa que desee ver en todas sus vistas debe colocarse en
                        un diseño.</p>

                    <p class=MsoNormal>El diseño por defecto de Ligne se encuentra en <span
                            style='background:silver'>/View/Layouts/default.php</span> Si desea cambiar el
                        aspecto general de su aplicación, este es el lugar correcto para comenzar, ya
                        que el código de vista renderizado por el controlador se coloca dentro del
                        diseño predeterminado cuando se representa la página.</p>

                    <p class=MsoNormal>Otros archivos de diseño deben colocarse en <span
                            style='background:silver'>/View/Layouts/</span>. Cuando creas un diseño,
                        necesitas decirle a Ligne dónde colocar la salida de tus vistas. Para hacerlo,
                        asegúrese de que su diseño incluya un lugar para <span style='background:silver'>$content_for_layout</span>
                        Aquí hay un ejemplo del aspecto que podría tener un diseño predeterminado:</p>
<pre>
    <code data-language="html">
< !doctype html>
 < html>
  < head>
    <meta charset="utf-8">
    <title>Ligne Framework</title>
  < /head>
  < body>
    <?=
    /**
     * Aqui se renderizan todas las vistas con el mismo layout
     **/
     $content_for_layout;
    ?>
  < /body>
 < /html>
    </code>
</pre>
                </div>
            </div>

            <div id="assets" class="panel bordered">
                <div class="body">
                    <p class=MsoNormal><b><span style='font-size:16.0pt;line-height:107%'>Assets o recursos</span></b></p>

                    <p class=MsoNormal>Los Assets o recursos son todas aquellas cosas que
                        complementa una página web llámese a estos JavaScript, CSS, fuentes, imágenes,
                        etc...</p>

                    <p class=MsoNormal>Ligne cuenta con una clase Assets estática que le brinda una
                        ayuda para enlazar recursos a sus vistas; </p>
<pre>
    <code data-language="html">
< !doctype html>
 < html>
  < head>
     <meta charset="utf-8">
     <title>Ligne Framework</title>

   //Agregando una hoja de estilos
   <link href="<?= Assets::setAssets('css/style.css') ?>" rel="stylesheet">
   //Agregando un script
   <script src="<?= Assets::setAssets('js/myscript.js') ?>"></script>

 < /head>
    </code>
</pre>

                    <p class=MsoNormal>Notese que se ha indicado dentro del método <span
                            style='background:silver'>setAssets()</span> el directorio <b>css </b>y el
                        recurso que se solicita <b>style.css</b> esto ayuda a la clase a saber en que
                        lugar buscar los recursos.</p>

                    <p class=MsoNormal>Esto no se limita solo a esto ya que puede buscar en
                        subdirectorios;</p>
<pre>
    <code data-language="html">
<script src="<?= Assets::setAssets('js/foo/myscript.js') ?>"></script>
    </code>
</pre>

                    <p class=MsoNormal>La llamada siempre debe estar acompañada del directorio raíz,
                        si este recurso no se encuentra, el navegador es quien le dirá esto.</p>

                    <p class=MsoNormal><b><span style='font-size:16.0pt;line-height:107%'>&nbsp;</span></b></p>
                </div>
            </div>

            <div id="interaccion_vistas_datos" class="panel bordered">
                <div class="body">
                    <p class=MsoNormal><b><span style='font-size:16.0pt;line-height:107%'>Las
vistas y la interacción con los datos</span></b></p>

                    <p class=MsoNormal>Las vistas pueden recibir una cantidad de datos enormes,
                        inclusive matrices. Estos datos son pasados del controlador a la vista por el
                        método <span style='background:silver'>setData()</span> por lo que podemos
                        pasar una consulta de las tareas que tenemos en nuestra app;</p>
<pre>
    <code data-language="php">
use Models\Tasks\Task;

 class TasksController extends Controller
 {
    public function index()
    {
        $tasks = new Task();

        //Consultando todos los datos en la base de datos
        $data['tasks'] = $tasks->showAllTasks();

        //envia datos a la vista
        $this->setData($data);

        //Renderiza la vista
        $this->render("index");
    }

 }
    </code>
</pre>

                    <p class=MsoNormal>En este caso el controlador <b>TaskController</b> en su
                        método <b>index</b> está solicitando todas las tareas que existen en la base de
                        datos mediante el modelo Task (El modelo se explica más adelante).</p>

                    <p class=MsoNormal>En la vista <span style='background:silver'>/views/Tasks/index.php</span>
                        ya podremos interactuar con los datos que le hemos enviado desde el
                        controlador;</p>
<pre>
    <code data-language="html">
< ?php foreach ($tasks as $task): ?>
    < tr>
        < td>< ?= $task["id"] ? > < / td>
        < td>< ?= $task["title"] ? > < / td>
        < td>< ?= $task["description"] ? > < / td>
        < td>< ?= $task["created_at"] ? > < / td>
    < / tr>
< ?php endforeach; ?>
    </code>
</pre>

                    <p class=MsoNormal>Note que emos usado el ciclo <b>foreach</b> para iterar el
                        arreglo que hemos recibido con las tareas ya creadas. Los índices <b>id</b>, <b>title</b>,
                        <b>description</b> y <b>created_at</b> de la matriz son los nombres de los
                        campos de nuestra tabla <b>tasks</b> en la base de datos.</p>

                    <table class="table striped bordered secondary">
                        <thead>
                            <th>ID</th>
                            <th>Task</th>
                            <th>Description</th>
                            <th>Date Success</th>
                        </thead>
                        <tbody>
                            <tr>
                                <td>1</td>
                                <td>Other</td>
                                <td>Foo</td>
                                <td>2018-10-09 09:56:19</td>
                            </tr>
                            <tr>
                                <td>2</td>
                                <td>Bar</td>
                                <td>One breack at 14:00</td>
                                <td>2018-10-08 10:07:12</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>

            <div id="funciones_extras" class="panel bordered">
                <div class="body">
                    <p class=MsoNormal><b><span style='font-size:16.0pt;line-height:107%'>Funciones
extras</span></b></p>

                    <p class=MsoNormal>El método <span style='background:silver'>render()</span> es
                        capaz de renderizar varias vistas, esto puede ser útil cuando quieres tener tus
                        vistas fragmentadas <b>header</b>, <b>side,</b> <b>body </b>y <b>footer</b> por
                        separado, un ejemplo de esto sería lo siguiente;</p>
<pre>
    <code data-language="php">
public function home(){

    $this->render('header');
    $this->render('aside');
    $this->render('body');
    $this->render('footer');

}
    </code>
</pre>
                </div>
            </div>

        </div>
    </div>
    <!--incluyendo el pie de pagina-->
    <div w3-include-html="includes/pie_pagina.html"></div>
    <script>
        includeHTML();
    </script>
    <!--incluyendo el pie de pagina-->
</div>
</body>
</html>
