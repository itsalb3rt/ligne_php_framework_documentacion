<html>

<head>
    <meta charset="UTF-8">
    <meta http-equiv=Content-Type content="text/html; charset=windows-1252">
    <meta name=Generator content="Microsoft Word 15 (filtered)">
    <link rel="stylesheet" href="css/ligne.min.css?v1.2">
    <link rel="stylesheet" href="css/menu.css">
    <link rel="stylesheet" href="css/code_style.css">
    <script src="js/includes.js"></script>
    <script src="js/rainbow-custom.min.js"></script>
    <script src="js/php.js"></script>
    <style>
        /* Font Definitions */
        * {
            font-family: Verdana, sans-serif;
        }

        /*Estilo del codigo php*/
        p.MsoNormal, li.MsoNormal, div.MsoNormal {
            margin-top: 0cm;
            margin-right: 0cm;
            margin-bottom: 8.0pt;
            margin-left: 0cm;
            line-height: 1.5rem;
            font-size: 14pt;
            font-family: "Calibri", sans-serif;
        }
        pre {
            mso-style-link: "HTML con formato previo Car";
            margin: 0cm;
            margin-bottom: .0001pt;
            font-size: 10.0pt;
            font-family: "Courier New";
        }
        ol li{
            margin: 8px;
            font-weight: bold;
        }
    </style>

</head>

<body>

<!--incluyendo la tabla de contenido lateral-->

<div class="container-fluid">
    <div w3-include-html="includes/tabla_contenido.html"></div>
    <!--incluyendo el menu-->
    <div w3-include-html="includes/menu.html"></div>
    <div class="panel bordered">
        <div class="panel">
            <div class="body">
                <h3>Contenido</h3>
                <ol>
                    <li><a href="#controladores" class="primary undecoration important">Controladores</a></li>
                    <li><a href="#acciones_controlador" class="primary undecoration important">Acciones del controlador</a></li>
                    <li><a href="#interactuando_vistas" class="primary undecoration important">Interactuando con Vistas</a></li>
                    <li><a href="#interactuar_modelos" class="primary undecoration important">Interactuar con los modelos</a></li>
                    <li><a href="#control_flujo" class="primary undecoration important">Control de flujo</a></li>
                </ol>
            </div>
        </div>
        <div class="body">
            <div id="controladores" class="panel bordered">
                <div class="body">
                    <p class=MsoNormal><b><span style='font-size:16.0pt;line-height:107%'>Controladores</span></b></p>

                    <p class=MsoNormal>Los controladores son el intermediario entre
la vista<i> (Lo que ve el usuario)</i> y el modelo <i>(Interacción con la base
de datos).</i></span></p>

                    <p class=MsoNormal>Los controladores proporcionan una serie de
métodos que manejan las solicitudes. Estas son llamadas de acciones. cada
método público en un controlador es una acción, y es accesible desde una URL.</p>

                    <p class=MsoNormal>Una acción es responsable de interpretar la
solicitud y crear la respuesta. Por lo general, las respuestas tienen la forma
de una vista renderizada, pero también hay otras formas de crear respuestas.</p>

                    <p class=MsoNormal>Cada controlador creado debe heredar de la
clase <b>Controller</b>, el <b>Controller </b>es la clase principal para todos
los controladores de la aplicación. Esta clase está incluida en la biblioteca
principal de Ligne.</p>
<pre>
    <code data-language="php">
class tasksController extends Controller {
 //Code…
 }
    </code>
</pre>
                </div>
            </div>

            <div id="acciones_controlador" class="panel bordered">
                <div class="body">
                    <p class=MsoNormal><b><span style='font-size:16.0pt;line-height:107%'>Acciones
del controlador</span></b></p>

                    <p class=MsoNormal>Las acciones del controlador son responsables de convertir
                        los parámetros de solicitud en una respuesta para el usuario que realiza la
                        solicitud. </p>

                    <p class=MsoNormal>Por convención, Ligne presenta una vista con una versión
                        modulada del nombre de la acción. Crearemos un controlador de tareas como
                        ejemplo, en el crearemos las acciones <span style='background:silver'>allTack()</span>,
                        <span style='background:silver'>create()</span> y <span style='background:silver'>edit()</span>;</p>

                    <pre>
                        <code data-language="php">
class tasksController extends Controller //Herencia
 {
    public function allTask()
    {
        //Código
    }

    public function create()
    {
        //Código
    }

    public function edit($id)
    {
        //Código
    }

 }
                        </code>
                    </pre>


                    <p class=MsoNormal>Los archivos de vista de estas acciones serían <span
                            style='background:silver'>/View/Tasks/alltask.php</span>, <span
                            style='background:silver'>/View/Tasks/create.php</span> y <span
                            style='background:silver'>/View/Tasks/edit.php</span> El nombre del archivo de
                        vista convencional es la versión en minúscula de la acción.</p>
                </div>
            </div>

            <div id="interactuando_vistas" class="panel bordered">
                <div class="body">
                    <p class=MsoNormal>
                        <b>
                            <span style='font-size:16.0pt;line-height:107%'>Interactuando con Vistas</span>
                        </b>
                    </p>

                    <p class=MsoNormal>Los controladores interactúan con las vistas de varias
                        maneras. Primero, pueden pasar datos a las vistas, usando <span
                                style='background:silver'>setData()</span>. También puede decidir qué archivo
                        de vista usar desde el controlador.</p>

                    <p class=MsoNormal>El método <span style='background:silver'>setData() </span>es
                        la forma principal de enviar datos desde su controlador a su vista. Una vez que
                        haya usado <span style='background:silver'>setData()</span>, se puede acceder a
                        la variable en su vista:</p>

                    <pre>
                        <code data-language="php">
$data['date'] = "Oct 2018";
//envía datos a la vista desde el controlador
$this->setData($data);

//Accediendo a los datos en la vista
La fecha es: <strong><?= $date ?></strong> </code>
                    </pre>

                    <p class=MsoNormal>El método <span style='background:silver'>setData()</span> también
                        toma una matriz asociativa como su primer parámetro. A menudo, esto puede ser
                        una forma rápida de asignar un conjunto de información a la vista.</p>

                    <p class=MsoNormal>El método <span style='background:silver'>render()</span> se
                        llama al final de cada acción del controlador. Este método realiza toda la
                        lógica de la vista (utilizando los datos que ha enviado utilizando el método <span
                                style='background:silver'>setData()</span>), coloca la vista dentro del mismo $
                        layout.</p>
<pre>
    <code data-language="php">
public function edit()
 {
    $data['tasks'] = $tasks->showAllTasks();

    //envia datos a la vista
    $this->setData($data);

    //Renderiza la vista
    $this->render("index");
 }
    </code>
</pre>


                    <p class=MsoNormal>
                        El método <span style='background:silver'>render()</span> admite un segundo
                        parámetro el cual es utilizado para establecer el título de la página;</p>
<pre>
    <code data-language="php">
$this->render("index",'Index Page'); //Renderiza la vista con un titulo
    </code>
</pre>

                    <p class=MsoNormal>
                        Este habitualmente se coloca en la etiqueta &lt;title&gt; de html en el layout</p>
<pre>
    <code data-language="php">
<title><?= $page_title ?></title>
    </code>
</pre>
                </div>
            </div>

            <div id="interactuar_modelos" class="panel bordered">
                <div class="body">
                    <div>
                        <p class=MsoNormal>
                            <b>
                                <span style='font-size:16.0pt;line-height:107%'>Interactuar con los modelos</span>
                            </b>
                    </div>
                        Por convicción los modelos se añaden a los controladores en la cabecera de las clases controladoras utilizando la palabra reservada <span style='background:silver'>use</span>;</p>

                    <pre>
                        <code data-language="php">
use Models\Tasks\Task;

class TasksController extends Controller
{
         //code...
}</code>
                    </pre>

                    <p class=MsoNormal>Inmediatamente haga uso del modelo, podrá realizar instancias de la clase, si no se realiza esto y se instancia una clase no incluida en la cabecera, resultara en un error fatal que detendrá la ejecución de su programa.
                        Note que el <span style='background:silver'>use</span> es el <span style='background:silver'>namespace</span> de su clase.
                        Los modelos se utilizarán siempre que sea necesaria la extracción de datos de la base de datos.
                    </p>

                    <p class=MsoNormal>Los modelos se utilizarán siempre que sea necesaria la
                        extracción de datos de la base de datos.</p>
                </div>
            </div>

            <div id="control_flujo" class="panel bordered">
                <div class="body">
                    <p class=MsoNormal><b><span style='font-size:16.0pt;line-height:107%'>Control
de flujo</span></b></p>

                    <p class=MsoNormal>El método de control de flujo que usarás más a menudo es <span
                            style='background:silver'>redirect()</span>. Este método toma su primer
                        parámetro en forma de una URL relativa a Ligne. Cuando un usuario ha realizado
                        un pedido con éxito, es posible que desee redirigirlos a una pantalla de éxito.</p>
<pre>
    <code data-language="php">
public function create()
 {
    $task= new Task();

    if ($task -> create( $_POST["title"], $_POST["description"]) )
    {
        $this -> redirect(array( 'controller'=>'tasks','action'=>'index' ) );
    }
 }
    </code>
</pre>

                    <p class=MsoNormal>También puede usar una URL relativa o absoluta como el argumento
                        <span class="code">$redirecTo</span></p>
<pre>
    <code data-language="php">
 $this->redirect ( '/ tasks / index' );
 $this->redirect ( 'http://www.github.com' );
    </code>
</pre>

                    <p class=MsoNormal>También puede pasar datos a la acción:</p>
<pre>
    <code data-language="php">
$this->redirect( array('controller'=>'tasks','action'=>'edit'),$id );
    </code>
</pre>

                    <p class=MsoNormal>El Segundo parámetro que <span style='background:silver'>redirect()</span>
                        admite es un parámetro para la url enviada.</p>

                    <p class=MsoNormal>&nbsp;</p>
                </div>
            </div>
        </div>

    </div>
    <!--incluyendo el pie de pagina-->
    <div w3-include-html="includes/pie_pagina.html"></div>
    <script>
        includeHTML();
    </script>
    <!--incluyendo el pie de pagina-->
</div>
</body>
</html>
